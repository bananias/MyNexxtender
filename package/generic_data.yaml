substitutions:
  ble_uuid_generic_data: ${ble_uuid_prefix}df
  ble_uuid_generic_command: ${ble_uuid_prefix}dd
  ble_uuid_generic_status: ${ble_uuid_prefix}de
  generic_data_prefix: Generic Data
  generic_data_id_prefix: generic_data
  generic_data_update_interval: 60s

globals:
  - id: g_${generic_data_id_prefix}_config_read_bool
    type: bool
  - id: g_${generic_data_id_prefix}_week_start
    type: std::string
  - id: g_${generic_data_id_prefix}_week_end
    type: std::string
  - id: g_${generic_data_id_prefix}_weekend_start
    type: std::string
  - id: g_${generic_data_id_prefix}_weekend_end
    type: std::string
  - id: g_selected_charge_mode
    type: std::string
    restore_value: true

sensor:
  - platform: template
    name: "Charging Phases"
    id: ${generic_data_id_prefix}_charging_phases
    icon: mdi:counter
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Maximum available capacity"
    id: ${generic_data_id_prefix}_i_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Offloading minimum"
    id: ${generic_data_id_prefix}_i_min
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Maximum car charging speed"
    id: ${generic_data_id_prefix}_i_evse_max
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Minimum car charging speed"
    id: ${generic_data_id_prefix}_i_evse_min
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Peak consumption limit"
    id: ${generic_data_id_prefix}_i_capacity
    icon: mdi:current-ac
    device_class: current
    unit_of_measurement: A
    state_class: measurement
    accuracy_decimals: 0
    update_interval: ${generic_data_update_interval}

text_sensor:
  - platform: template
    name: "Mode"
    id: ${generic_data_id_prefix}_charge_mode
    icon: mdi:speedometer
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Connection type"
    id: ${generic_data_id_prefix}_connection_type
    icon: mdi:transmission-tower
    update_interval: ${generic_data_update_interval}
  - platform: template
    name: "Week schema"
    id: ${generic_data_id_prefix}_week_schema
    icon: mdi:calendar
    update_interval: ${generic_data_update_interval}
    lambda: |-
      char time_string[20];
      sprintf(time_string, "%s - %s", id(g_${generic_data_id_prefix}_week_start).c_str(), id(g_${generic_data_id_prefix}_week_end).c_str());
      return optional<String>(time_string);
  - platform: template
    name: "Weekend schema"
    id: ${generic_data_id_prefix}_weekend_schema
    icon: mdi:calendar
    update_interval: ${generic_data_update_interval}
    lambda: |-
      char time_string[20];
      sprintf(time_string, "%s - %s", id(g_${generic_data_id_prefix}_weekend_start).c_str(), id(g_${generic_data_id_prefix}_weekend_end).c_str());
      return optional<String>(time_string);
  - platform: ble_client
    id: ${device_name}_generic_status
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_generic_status}
    update_interval: ${generic_data_update_interval}
    notify: true
    on_notify:
      then:
        lambda: |-
          logd_x("${device_name}_${generic_data_id_prefix}_status", x);
  - platform: ble_client
    id: ${device_name}_generic_data
    internal: true
    ble_client_id: ${device_name}_ble_client_id
    service_uuid: ${ble_uuid_receive_service}
    characteristic_uuid: ${ble_uuid_generic_data}
    notify: true
    update_interval: never
    on_notify:
      then:
        lambda: |-
          if (x.empty()) { return; }
          logd_x("${device_name}_generic_data", x);

          //Flag the config read as true
          id(g_${generic_data_id_prefix}_config_read_bool) = true;
          size_t index = 0;
          bool found_b2 = false;

          // Declare variables outside the switch-case block
          String value_string;
    
          while (index < x.size() - 1) {
            if (x[index] == 0xB2) {
                found_b2 = true;
                index++; // Move to the next byte after B2

                // Process the B2 map x
                while (index < x.size()) {
                  uint8_t key = x[index++];
                  uint8_t initial_byte = x[index++];
                  uint8_t major_type = initial_byte >> 5;
                  uint8_t additional_info = initial_byte & 0x1F;
                  uint64_t value = 0;

                  if (additional_info < 24) {
                    value = initial_byte;
                    ESP_LOGD("${device_name}_generic_data", "B2 Map Item %d(%d): %lld [%d]", key, additional_info, value, major_type);
                  } else if (additional_info == 24) {
                    value = x[index];
                    index += 1;
                    ESP_LOGD("${device_name}_generic_data", "B2 Map Item %d(%d): %lld [%d]", key, additional_info, value, major_type);
                  } else if (additional_info == 25) {
                    value = (x[index] << 8) | x[index+1];
                    index += 2;
                    ESP_LOGD("${device_name}_generic_data", "B2 Map Item %d(%d): %lld [%d]", key, additional_info, value, major_type);
                  }

                  switch (key) {
                    case 1: // Charge Mode
                        switch (value) {
                            case 0:
                                value_string = "Eco Private";
                                break;
                            case 1:
                                value_string = "Max Private";
                                break;
                            case 4:
                                value_string = "Eco Open";
                                break;
                            case 5:
                                value_string = "Max Open";
                                break;
                            default:
                                value_string = "unknown";
                        }
                        id(${generic_data_id_prefix}_charge_mode).publish_state(value_string.c_str());
                        break;
                    case 2: //modbusSlaveAddress(2)
                        break;
                    case 3: //cycleRate(3)
                        break;
                    case 4: //iMax(4), 16 (max beschikbare capaciteit)
                        id(${generic_data_id_prefix}_i_max).publish_state(value);
                        break;
                    case 5: //iEvseMax(5), 16 (maximale laadsnelheid auto)
                        id(${generic_data_id_prefix}_i_evse_max).publish_state(value);
                        break;
                    case 6: //iEvseMin(6), 6 (minimale laadsnelheid auto)
                        id(${generic_data_id_prefix}_i_evse_min).publish_state(value);
                        break;
                    case 7: //iLevel1(7), 6 (offloading minimum?)
                        id(${generic_data_id_prefix}_i_min).publish_state(value);
                        break;
                    case 8: //solarMode(8), 0
                        break;
                    case 9: //phaseSeq(9), 0
                        switch (value) {
                            case 0:
                                value_string = "Mono/Tri+N";
                                break;
                            case 3:
                                value_string = "Tri";
                                break;
                            default:
                                value_string = "unknown";
                        }
                        id(${generic_data_id_prefix}_connection_type).publish_state(value_string.c_str());
                        break;
                    case 10: //chargingPhases(10), 3
                        id(${generic_data_id_prefix}_charging_phases).publish_state(value);
                        break;
                    case 11: //blePin(11),
                        break;
                    case 12: //touWeekStart(12)
                        id(g_${generic_data_id_prefix}_week_start) = getTimeString(value);
                        break;
                    case 13: //touWeekStop(13)
                        id(g_${generic_data_id_prefix}_week_end) = getTimeString(value);
                        break;
                    case 14: //touWeekendStart(14), 0
                        id(g_${generic_data_id_prefix}_weekend_start) = getTimeString(value);
                        break;
                    case 15: //touWeekendStop(15), 0
                        id(g_${generic_data_id_prefix}_weekend_end) = getTimeString(value);
                        break;
                    case 16: //timezone(16), 0
                        break;
                    case 17: //relayOffPeriod(17), 5
                        break;
                    case 18: //externalRegulation(18), 0
                        break;
                    case 19: //iCapacity(19); 16/15
                        id(${generic_data_id_prefix}_i_capacity).publish_state(value);
                    default:
                        break;
                  }                      
              }
                break; // Exit the loop once B2 map is found
            } else {
                index++; // Move to the next byte
            }
          }

          if (!found_b2) {
              ESP_LOGD("${device_name}_generic_data", "B2 map not found in the CBOR data.");
          }

button:
  - platform: template
    name: "Read config"
    id: read_config_button
    entity_category: diagnostic
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x04, 0x50]
  - platform: template
    name: "Start Charge Default"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x01, 0x00]
  - platform: template
    name: "Start Charge Max"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x02, 0x00]
  - platform: template
    name: "Start Charge Auto"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x03, 0x00]
  - platform: template
    name: "Start Charge Eco"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x04, 0x00]
  - platform: template
    name: "Start Charge Stop"
    on_press:
      - ble_client.ble_write:
          id: ${device_name}_ble_client_id
          service_uuid: ${ble_uuid_receive_service}
          characteristic_uuid: ${ble_uuid_generic_command}
          value: [0x06, 0x00]
